/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
/**
 *
 * @author saiko
 */
public class JeuMemory extends javax.swing.JFrame {

    //Attributs 
    
    LesJoueurs lesJoueurs; // La liste des Joueurs
    LesPersonnages lesPersos; // La liste des Personnages 
    private Jeu monJeu; // pour la gestion d’un tour de jeu
    private int l1, c1, l2, c2; // pour les cartes sélectionnées à chaque tour de jeu
    InitDlg select; // Fenêtre Initialisation du jeu
    VisuJoueursDlg vision; // Fenêtre Visualisation des Joueurs
    SaisieJoueurDlg ajout; // Fenêtre Ajouter un Joueur
    VisuPersonnagesDlg carte; // FePnêtre Visualisation des Cartes
        
    //Constructeurs
    
    public JeuMemory() {
        initComponents(); // Construction de l'interface par l'EDI
        // Initialisation
        lesJoueurs = new LesJoueurs();
        lesPersos = new LesPersonnages();
        l1 = -1; c1 = -1; // Aucune carte selectionnée
        l2 = -1; c2 = -1; // Aucune carte selectionnée
        // Construction
        this.Joueur.setEnabled(false);
        this.Carte.setEnabled(false);
        this.Recommencer.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panneau = new javax.swing.JPanel();
        West = new javax.swing.JPanel();
        Text = new javax.swing.JPanel();
        nbrepersotrouve = new javax.swing.JLabel();
        nbrepersorestant = new javax.swing.JLabel();
        joueurC = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Edition = new javax.swing.JTextArea();
        Bouton = new javax.swing.JPanel();
        Demarrer = new javax.swing.JButton();
        Recommencer = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Parametres = new javax.swing.JMenu();
        Option = new javax.swing.JMenuItem();
        AjoutJoueur = new javax.swing.JMenuItem();
        Visualiser = new javax.swing.JMenu();
        Joueur = new javax.swing.JMenuItem();
        Carte = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Panneau.setLayout(new java.awt.GridLayout(4, 5));
        getContentPane().add(Panneau, java.awt.BorderLayout.CENTER);

        West.setLayout(new java.awt.BorderLayout());

        Text.setLayout(new java.awt.GridLayout(3, 1));
        Text.add(nbrepersotrouve);
        Text.add(nbrepersorestant);

        joueurC.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        joueurC.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        joueurC.setText("JEU DE MEMORY");
        Text.add(joueurC);

        West.add(Text, java.awt.BorderLayout.NORTH);

        Edition.setEditable(false);
        Edition.setColumns(20);
        Edition.setRows(5);
        jScrollPane1.setViewportView(Edition);

        West.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        Bouton.setLayout(new java.awt.GridLayout(1, 2));

        Demarrer.setText("Demarrer");
        Demarrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DemarrerActionPerformed(evt);
            }
        });
        Bouton.add(Demarrer);

        Recommencer.setText("Recommencer");
        Recommencer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecommencerActionPerformed(evt);
            }
        });
        Bouton.add(Recommencer);

        West.add(Bouton, java.awt.BorderLayout.SOUTH);

        getContentPane().add(West, java.awt.BorderLayout.WEST);

        Parametres.setText("Paramètres");

        Option.setText("Options");
        Option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptionActionPerformed(evt);
            }
        });
        Parametres.add(Option);

        AjoutJoueur.setText("Ajouter un joueur");
        AjoutJoueur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AjoutJoueurActionPerformed(evt);
            }
        });
        Parametres.add(AjoutJoueur);

        jMenuBar1.add(Parametres);

        Visualiser.setText("Visualiser");

        Joueur.setText("Joueur");
        Joueur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JoueurActionPerformed(evt);
            }
        });
        Visualiser.add(Joueur);

        Carte.setText("Carte");
        Carte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CarteActionPerformed(evt);
            }
        });
        Visualiser.add(Carte);

        jMenuBar1.add(Visualiser);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptionActionPerformed
        // Gestionnaire de la sélection du sous menu Option
        select = new InitDlg(this, true); // Création de la boîte
        select.setSize(750, 500);
        select.setTitle("Initialisation du Jeu");
        select.setVisible(true);
        if(select.getOk())
        {
            // Si la fenetre est fermé avec valider
            this.lesJoueurs = select.getJoueurs(); // Récupération de la liste des joueurs
            lesPersos = new LesPersonnages(select.getNiveau()); // Récupération de la liste des personnages
        }
    }//GEN-LAST:event_OptionActionPerformed

    private void JoueurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JoueurActionPerformed
        // Gestionnaire de la sélection du sous menu Joueur
        vision = new VisuJoueursDlg(this, true, this.lesJoueurs);
        vision.setSize(500, 250);
        vision.setTitle("Visualisation des Joueurs");
        vision.setVisible(true);
    }//GEN-LAST:event_JoueurActionPerformed

    private void AjoutJoueurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AjoutJoueurActionPerformed
        // Gestionnaire de la sélection du sous menu Ajouter un Joueur
        if(lesPersos.getTaille() != 0)
        {
            ajout = new SaisieJoueurDlg(this, true, this.lesPersos);
            ajout.setSize(500,300);
            ajout.setTitle("Ajouter un Joueur");
            ajout.setVisible(true);
            if(ajout.getSortie())
                this.lesJoueurs.ajouteJoueur(ajout.getJoueur());
        }
        else
            this.Edition.setText("Commencer par choisir un niveau dans Options");
    }//GEN-LAST:event_AjoutJoueurActionPerformed

    private void CarteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CarteActionPerformed
        // Gestionnaire de la sélection du sous menu Carte
        carte = new VisuPersonnagesDlg(this, true, this.lesJoueurs.getJoueur(monJeu.getIndC()));
        carte.setSize(500,300);
        carte.setTitle("Visualisation des cartes de "+this.lesJoueurs.getJoueur(monJeu.getIndC()).getPseudo());
        carte.setVisible(true);
    }//GEN-LAST:event_CarteActionPerformed

    private void DemarrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DemarrerActionPerformed
        // Gestionnaire du clic sur le bouton Demarrer
        if(lesJoueurs.getNbJoueurs() < 2) // Si le nombre de joueurs est inférieur à 2
            // un message d’erreur est affiché dans la zone d’édition
            this.Edition.setText("Erreur !! Partie Impossible avec moins de 2 Joueurs\n Sélectionner au moins deux joueurs !!");
        else
        {
            // la partie peut commencer
            monJeu = new Jeu(lesPersos, lesJoueurs, select.getNiveau());
            this.Demarrer.setEnabled(false); // Le bouton « Démarrer » est invalidé 
            this.Recommencer.setEnabled(true); // Le bouton « Recommencer » est validé
            this.Option.setEnabled(false); // La sous-option de menu « Options » est invalidée
            this.AjoutJoueur.setEnabled(false); // La sous-option de menu « Ajout Joueur » est invalidée
            // Les sous-options de menu « Joueurs » et « Cartes » de l’option « Visualisation » sont validés 
            this.Joueur.setEnabled(true);
            this.Carte.setEnabled(true);
            // Les messages indiquant le nombre de personnages trouvés et restants de la fenêtre sont affichés
            int x = monJeu.nbPers() + lesJoueurs.getJoueur(monJeu.getIndC()).getNbCartes();
            this.nbrepersotrouve.setText("Nombres de personnages trouvés : " + x);
            this.nbrepersorestant.setText("Nombres de personnages restants : " +(lesPersos.getTaille() - x));
            // Le message indiquant le nom du joueur courant est également affiché
            this.joueurC.setText("C'est à " + lesJoueurs.getJoueur(monJeu.getIndC()).getPseudo() + " de jouer");
            // Construction du Panneau
            // Disposition du Panneau
            this.Panneau.setLayout(new GridLayout(monJeu.getMonP().getNblig(), monJeu.getMonP().getNbcol()));
            for(int i = 0; i < monJeu.getMonP().getNbc()*2; i++)
            {
                JButton bt = new JButton();
                bt.setName("" + i); // Nommer le bouton
                bt.addActionListener(
                    new java.awt.event.ActionListener(){
                        public void actionPerformed(ActionEvent evt){
                            boutonActionPerformed(evt);
                        }
                    }
                ); 
                this.Panneau.add(bt);
            }
            
        }
    }//GEN-LAST:event_DemarrerActionPerformed

    private void RecommencerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecommencerActionPerformed
        // Gestionnaire du clic sur le bouton Recommencer
        // Effacer le panneau
        this.Panneau.removeAll();
        // Effacer la zone d'edition
        this.Edition.setText("");
        // Effacer les labels nombres de personnages trouvées et restants
        this.nbrepersorestant.setText("");
        this.nbrepersotrouve.setText("");
        // Label JoueurC
        this.joueurC.setText("JEU DE MEMORY");
        // Activer Options et Ajout
        this.Option.setEnabled(true);
        this.AjoutJoueur.setEnabled(true);
        // Desactiver Visualiser Joueur et Carte
        this.Carte.setEnabled(false);
        this.Joueur.setEnabled(false);
        // Réactiver le bouton Demarrer
        this.Demarrer.setEnabled(true);
        // Desactiver le bouton recommencer
        this.Recommencer.setEnabled(false);
        // Effacer les personnages dans le cas d'un eventuel clic sur Demarrer
        effacer();
    }//GEN-LAST:event_RecommencerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JeuMemory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JeuMemory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JeuMemory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JeuMemory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JeuMemory lc= new JeuMemory(); 
                lc.setSize(1000,500) ; 
                lc.setTitle("Jeu de Memory"); 
                lc.setVisible(true);
            }
        });
    }

    // Méthodes
    private void boutonActionPerformed(ActionEvent evt) {
        // Récupération du bouton qui a été cliqué
        JButton bt = (JButton)evt.getSource();
        // Récupération du « Name » du bouton qui est en fait son numéro
        int x = Integer.parseInt(bt.getName());
        // Calcul du numéro de ligne et de la colonne correspondant à ce numéro 
        int l = x / monJeu.getMonP().getNbcol();
        int c = x % monJeu.getMonP().getNbcol();
        // Récupération (à l’aide du plateau) de la valeur associée à cette carte dans le plateau 
        x = monJeu.getMonP().getCase(l, c);
        // Récupération du personnage de cette carte 
        Personnage p = lesPersos.getPerso(x);
        // Affichage de la photo du personnage sur le bouton cliqué
        Image img = p.getPhoto().getScaledInstance(bt.getWidth(), bt.getHeight(), Image.SCALE_DEFAULT);
        bt.setIcon(new ImageIcon(img));
        // S’il s’agit de la 1ère case cliquée (c’est-à-dire l1 et c1 valent -1)
        if(l1 == -1 && c1 == -1)
        {
            //  on affecte ligne et colonne calculées à l1 et c1
            l1 = l; c1 = c;
        }
        else
        {
            if(l != l1 || c != c1)// pour eviter l'action si on clique sur le meme bouton 2 fois de suite 
            {
                // Sinon on affecte ligne et colonne calculées à l2 et c2
                l2 = l; c2 = c;
                //  on appelle la méthode « startTimer() » 
                startTimer();
            }
        }
    }
    
    private void startTimer()
    {
        // définit un timer qui lance la vérification des deux personnages au bout d'une demi-seconde
        Timer t = new Timer(500, new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae){
                verifPersos();                 
            }         
        });         
        t.setRepeats(false);
        t.start(); 
    }
    
    public void verifPersos()
    {
        if(monJeu.getMonP().getCase(l1, c1) == monJeu.getMonP().getCase(l2, c2))
        {
            int x = monJeu.getMonP().getCase(l1, c1);
            // Récupération de la famille de ces personnages
            String fam = lesPersos.getPerso(x).getFamille();
            // Traitement du tour de jeu avec un appel à la méthode « traiteTour » 
            int bonus = monJeu.traiterTour(lesJoueurs.getJoueur(monJeu.getIndC()), x);
            if(bonus >= 0)
            {
                // Affichage de message qui indique que le joueur a gagné tous les personnages de la famille « fam » dans la zone d’édition 
                this.Edition.append("\nLe joueur "+monJeu.getJoueurCourant().getPseudo()+" a obtenu tous les personnages de la famille "+fam+"\n");;
                if(bonus == 0)
                {
                    //Si le bonus = 0 c’est la famille préférée du joueur
                    // le jeu se termine
                    monJeu.getMonP().termineJeu();
                    // Message indiquant le joueur gagnant
                    this.Edition.append("\n\nFIN DE LA PARTIE !!!\nVAINQUEUR : "+lesJoueurs.getJoueur(monJeu.getIndC()).getPseudo());
                    // tous les boutons du jeu sont bloqués
                    for(int i = 0; i < monJeu.getMonP().getNbc()*2; i++)
                    {
                        JButton b = (JButton)this.Panneau.getComponent(i);
                        b.setEnabled(false);
                    }       
                }
                else
                {
                    if(bonus == 1)
                    {
                        // Si le bonus = 1, un transfert doit être réalisé
                        // La boite de dialogue « TransfertDlg » est ouverte
                        TransfertDlg transfert = new TransfertDlg(this, true, lesJoueurs, monJeu.getIndC());
                        transfert.setTitle("Le joueur "+monJeu.getJoueurCourant().getPseudo()+" peut effectuer un transfert");
                        transfert.setSize(500, 300);
                        transfert.setVisible(true);
                        // Message indiquant le résultat du transfert
                        if(transfert.getOk())
                            this.Edition.append(transfert.getTc().getDeroulement());
                        else
                            this.Edition.append(this.lesJoueurs.getJoueur(transfert.getIndj()).getPseudo()+" a décidé de ne pas effectuer de transfert\n");
        
                    }
                    else
                    {
                        if(bonus == 2)
                        {
                            // Si le bonus = 2, une bataille doit être réalisée
                            // La boite de dialogue « BatailleDlg » est ouverte
                            BatailleDlg bataille = new BatailleDlg(this, true, lesJoueurs, monJeu.getIndC());
                            bataille.setTitle("Le joueur "+monJeu.getJoueurCourant().getPseudo()+" peut effectuer une bataille");
                            bataille.setSize(500, 500);
                            bataille.setVisible(true);
                            // Message indiquant le résultat de la bataille
                            this.Edition.append(bataille.getBataille().getDeroulement());
                        }
                    }
                }
                // Réinitialisation de la valeur du bonus à -1
                if(bonus != 0)
                    bonus = -1;
                // Le joueur courant change et est fixé au joueur suivant
                monJeu.setIndC(monJeu.getIndSuivant(monJeu.getIndC()));  
            }
            // Les cartes sont « retirées » du plateau en utilisant la méthode « invalide ( ….) » de la classe « PlateauJeu »
            monJeu.getMonP().invalide(l1, c1, l2, c2);
            // les photos des cartes retournées sont « effacées »
            JButton bt = (JButton)(this.Panneau.getComponent(monJeu.getMonP().getNbcol()* l1 + c1));
            bt.setEnabled(false);
            bt = (JButton)(this.Panneau.getComponent(monJeu.getMonP().getNbcol()* l2 + c2));
            bt.setEnabled(false);
            // S’il n’y plus de cartes à retourner (le plateau de jeu est vide)
            if(monJeu.finJeu())
            {
                //  Message indiquant le ou les gagnants dans la zone d’édition
                this.Edition.append("\n\nPARTIE TERMINEE :\n"+"VAINQUEUR(S):\n"+lesJoueurs.getGagnants().getPseudos());
                for(int i = 0; i < monJeu.getMonP().getNbc()*2; i++)
                {
                    JButton b = (JButton)this.Panneau.getComponent(i);
                    b.setEnabled(false);
                }
            }
            else
            {
                if(bonus != 0)
                   this.Edition.append(lesJoueurs.getJoueur(monJeu.getIndC()).toString());
            }
            // Le nombre de personnages trouvés et restants est mis à jour
            x = monJeu.nbPers() + lesJoueurs.getJoueur(monJeu.getIndC()).getNbCartes();
            this.nbrepersotrouve.setText("Nombres de personnages trouvés : " + x);
            this.nbrepersorestant.setText("Nombres de personnages restants : " +(lesPersos.getTaille() - x));
        }
        else
        {
            // les photos des cartes retournées sont « effacées »
            JButton bt = (JButton)(this.Panneau.getComponent(monJeu.getMonP().getNbcol()* l1 + c1));
            bt.setIcon(null);
            bt = (JButton)(this.Panneau.getComponent(monJeu.getMonP().getNbcol()* l2 + c2));
            bt.setIcon(null);
            // Le joueur courant change et est fixé au joueur suivant
            monJeu.setIndC(monJeu.getIndSuivant(monJeu.getIndC()));
            // L’affichage mis à jour
            this.Edition.append(lesJoueurs.getJoueur(monJeu.getIndC()).toString());
        }
        this.joueurC.setText("C'est à " + lesJoueurs.getJoueur(monJeu.getIndC()).getPseudo() + " de jouer");
        // Réinitialisation des valeurs des positions des cartes (l1,c1, l2, c2) à -1
        this.l1 = -1;this.c1 = -1;
        this.l2 = -1;this.c2 = -1;  
    }
    public void effacer()
    {
        for(int i = 0; i < lesJoueurs.getNbJoueurs(); i++)
            this.lesJoueurs.getJoueur(i).getPacket().retireCartes();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AjoutJoueur;
    private javax.swing.JPanel Bouton;
    private javax.swing.JMenuItem Carte;
    private javax.swing.JButton Demarrer;
    private javax.swing.JTextArea Edition;
    private javax.swing.JMenuItem Joueur;
    private javax.swing.JMenuItem Option;
    private javax.swing.JPanel Panneau;
    private javax.swing.JMenu Parametres;
    private javax.swing.JButton Recommencer;
    private javax.swing.JPanel Text;
    private javax.swing.JMenu Visualiser;
    private javax.swing.JPanel West;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel joueurC;
    private javax.swing.JLabel nbrepersorestant;
    private javax.swing.JLabel nbrepersotrouve;
    // End of variables declaration//GEN-END:variables
}

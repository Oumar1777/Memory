
import java.awt.Image;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 
/**
 *
 * @author saiko
 */
public class BatailleDlg extends javax.swing.JDialog {

    /**
     * Creates new form BatailleDlg
     */
    
    // Attributs
    private LesJoueurs lj; // La liste des joueurs
    private int indj; // Indice du joueur courant 
    private Joueur adversaire; // Adversaire sélectionné 
    private Bataille bataille; // Action réalisée
    private boolean ok; // action faite ou non
    
    // Constructeurs
    public BatailleDlg(java.awt.Frame parent, boolean modal, LesJoueurs l, int i) {
        super(parent, modal);
        initComponents();
        this.lj = l;
        this.indj = i;
        this.ok=false;         
        this.bataille = null;         
        initListeJ();          
        Annuler.setText("Annuler");  
        Annuler.setVisible(false); // Aucune bataille existe 
        MessageJ.setText(lj.getJoueur(indj).getPseudo()+" va effectuer une bataille contre : "); 
    }
    
    // Accesseurs
    public Joueur getAdversaire() {
        return adversaire;
    }
    public LesJoueurs getLj() {
        return lj;
    }
    public int getIndj() {
        return indj;
    }
    public Bataille getBataille() {
        return bataille;
    }
    public boolean isOk(){
        return this.ok;
    }
    
    // Méthodes
     public void initListeJ() { 
        //Remplissage de la JList Plantes par les élements de la liste des plantes
        DefaultListModel liste = new DefaultListModel();
        Liste.setModel(liste);
        for(int i = 0; i < lj.getNbJoueurs(); i++)
            liste.addElement(lj.getJoueur(i).getPseudo());
        // Restreindre la sélection à un seul choix possible
        
     } 
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings(value = "unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        Joueur = new javax.swing.JLabel();
        Adversaire = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        InfosCarte1 = new javax.swing.JTextArea();
        Carte1 = new javax.swing.JButton();
        Carte2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        InfosCarte2 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        Vainqueur = new javax.swing.JLabel();
        Annuler = new javax.swing.JButton();
        Demarrer = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        MessageJ = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Liste = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(1, 2));

        Joueur.setText("Joueur");
        jPanel2.add(Joueur);

        Adversaire.setText("Adversaire");
        jPanel2.add(Adversaire);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.GridLayout(1, 4));

        InfosCarte1.setEditable(false);
        InfosCarte1.setColumns(20);
        InfosCarte1.setRows(5);
        jScrollPane1.setViewportView(InfosCarte1);

        jPanel3.add(jScrollPane1);
        jPanel3.add(Carte1);
        jPanel3.add(Carte2);

        InfosCarte2.setEditable(false);
        InfosCarte2.setColumns(20);
        InfosCarte2.setRows(5);
        jScrollPane2.setViewportView(InfosCarte2);

        jPanel3.add(jScrollPane2);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.GridLayout(1, 3));

        Vainqueur.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel4.add(Vainqueur);

        Annuler.setText("Annuler/Fermer");
        Annuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnnulerActionPerformed(evt);
            }
        });
        jPanel4.add(Annuler);

        Demarrer.setText("Démarrer");
        Demarrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DemarrerActionPerformed(evt);
            }
        });
        jPanel4.add(Demarrer);

        getContentPane().add(jPanel4, java.awt.BorderLayout.SOUTH);

        jPanel5.setLayout(new java.awt.GridLayout(1, 2));

        MessageJ.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel5.add(MessageJ);

        Liste.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListeMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(Liste);

        jPanel5.add(jScrollPane3);

        getContentPane().add(jPanel5, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ListeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListeMouseClicked
        // Gestionnaire de la sélection dans la Liste
        int x = Liste.getSelectedIndex();
        if(x == indj)
        {
            // Message d'erreur
            MessageJ.setText("ERREUR !! "+lj.getJoueur(indj).getPseudo()+" ne peut pas se battre contre lui-même");
            this.Demarrer.setEnabled(true);
        }
        else
        {
            MessageJ.setText(lj.getJoueur(indj).getPseudo()+" va effectuer une bataille contre : ");
            // Recupération du joueur sélectionné
            this.adversaire = this.lj.getJoueur(x);
            // Si le joueur sélectionné n'a pas de carte
            if(adversaire.getPacket().getTaille() <= 0)
            {
                this.InfosCarte2.setText(adversaire.getPseudo()+" ne possède aucune carte");
                this.Demarrer.setEnabled(true);
            }
            else
            {
                // Nouvelle Bataille
                bataille = new Bataille(this.lj.getJoueur(indj), adversaire);
                // Rendre visible le bouton nommé « Annuler » 
                this.Annuler.setVisible(true);
                // Afficher les pseudos du joueur courant et de son adversaire dans les labels «Joueur» et «Adversaire»
                this.Joueur.setText(this.lj.getJoueur(indj).getPseudo());
                this.Adversaire.setText(this.adversaire.getPseudo());
                // Afficher le contenu du paquet de chacun des joueurs dans les zones d’édition «InfosCarte1» et «InfosCarte2»
                this.InfosCarte1.setText(this.lj.getJoueur(indj).getPacket().toString());
                this.InfosCarte2.setText(this.adversaire.getPacket().toString());
                // Affichage des premiers personnages
                this.Carte1.setIcon(new ImageIcon(this.lj.getJoueur(indj).getPacket().getPerso(0).getPhoto().getScaledInstance(Carte1.getWidth(), Carte1.getHeight(), Image.SCALE_DEFAULT)));
                this.Carte2.setIcon(new ImageIcon(this.adversaire.getPacket().getPerso(0).getPhoto().getScaledInstance(Carte2.getWidth(), Carte2.getHeight(), Image.SCALE_DEFAULT)));
            }
        }    
    }//GEN-LAST:event_ListeMouseClicked

    private void DemarrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DemarrerActionPerformed
        // Gestionnaire du clic sur le bouton Demarrer
        // Afficher le personnage joué (1er personnage du paquet du joueur), pour chaque joueur dans les zones d’édition «InfosCarte1» et «InfosCarte2»
        this.InfosCarte1.append("\n"+this.lj.getJoueur(indj).getPseudo()+" joue "+this.lj.getJoueur(indj).getPacket().getPerso(0).toString());
        this.InfosCarte2.append("\n"+this.adversaire.getPseudo()+" joue "+this.adversaire.getPacket().getPerso(0).toString());
        // Appeler la méthode «execute()» de la classe «Bataille» sur l’instance de la bataille créée dans le constructeur
        int retour = this.bataille.execute();
        if(retour != -1)
        {
            if(retour == 0)
            {
                // Le retour indique un match nul
                this.InfosCarte1.append("\n Ex-aequo : aucun gagnant");
                this.InfosCarte2.append("\n Ex-aequo : aucun gagnant");
                // Afficher le vainqueur dans le label « Vainqueur »
                this.Vainqueur.setText("NULLE");
            }
            else
            {
                if(retour == 1)
                {
                    // Le retour indique une victoire
                    this.InfosCarte1.append("\n "+this.lj.getJoueur(indj).getPseudo()+" gagne");
                    this.InfosCarte2.append("\n "+this.adversaire.getPseudo()+" perd");
                    // Afficher le vainqueur dans le label « Vainqueur »
                    this.Vainqueur.setText(""+this.lj.getJoueur(indj).getPseudo());
                }
                else
                {
                    // Le retour indique une défaite
                    this.InfosCarte1.append("\n "+this.lj.getJoueur(indj).getPseudo()+" perd");
                    this.InfosCarte2.append("\n "+this.adversaire.getPseudo()+" gagne");
                    // Afficher le vainqueur dans le label « Vainqueur »
                    this.Vainqueur.setText(""+this.adversaire.getPseudo());
                }
            }
            // l’affichage du nouveau contenu des paquets de chacun des joueurs dans les zones d’édition «InfosCarte1» et «InfosCarte2»
            this.InfosCarte1.append(this.lj.getJoueur(indj).getPacket().toString());
            this.InfosCarte2.append(this.adversaire.getPacket().toString());
            // Ok passe à true
            this.ok = true;  
        }
        if(this.lj.getJoueur(indj).getPacket().getTaille() <= 0 || this.adversaire.getPacket().getTaille() <= 0)
        {
            // Si l’un des joueurs n’a plus de personnage
            this.Carte1.setIcon(null);
            this.Carte2.setIcon(null);
            // La désactivation du bouton « Demarrer » 
            this.Demarrer.setEnabled(false);
            // L’apparition du texte « Fermer » sur le bouton « Annuler »
            this.Annuler.setText("Fermer");
        }
        else
        {
            // l’affichage de la photo du personnage suivant du paquet de chaque joueur  sur les boutons « Carte1 » et « Carte2 »
            this.Carte1.setIcon(new ImageIcon(this.lj.getJoueur(indj).getPacket().getPerso(0).getPhoto().getScaledInstance(Carte1.getWidth(), Carte1.getHeight(), Image.SCALE_DEFAULT)));
            this.Carte2.setIcon(new ImageIcon(this.adversaire.getPacket().getPerso(0).getPhoto().getScaledInstance(Carte2.getWidth(), Carte2.getHeight(), Image.SCALE_DEFAULT)));
        }
    }//GEN-LAST:event_DemarrerActionPerformed

    private void AnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnnulerActionPerformed
        // Gestionnaire du clic sur le bouton Annuler
        this.ok=false;
        if (Annuler.getText().equals("Annuler"))
            this.bataille.setDeroulement("Bataille interrompue en cours de partie"); 
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_AnnulerActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Adversaire;
    private javax.swing.JButton Annuler;
    private javax.swing.JButton Carte1;
    private javax.swing.JButton Carte2;
    private javax.swing.JButton Demarrer;
    private javax.swing.JTextArea InfosCarte1;
    private javax.swing.JTextArea InfosCarte2;
    private javax.swing.JLabel Joueur;
    private javax.swing.JList<String> Liste;
    private javax.swing.JLabel MessageJ;
    private javax.swing.JLabel Vainqueur;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
